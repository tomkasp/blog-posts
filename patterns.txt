1. Template method.

You should use template method when you want to delegate some portion of the code functionality to the concrete implementation.
Let's say you have an abstract class which is a thread and has run method which is implemented inside this class.
Beside of this method you have also two other method like acquire and release.
your run implementation of the run method looks like this:

public void run(){

	acquire();
	//some stuff
	release();

}

In this case your template method is a run method an concrete implementation of the abstract class has implemetation for
acquire and release methods.

2. Factory

Factory pattern, by definition, is responsible for creating new objects. I like to think about it as a single place in my code where object production happens
(the same as it is in e.g car factory).

this is the example

public class CarFactory(){

	public enum CarType{
		SUV,
		TRUCK
	}

	private CarType carType = CarType.SUV;

	public Car makeCar(){
		if(carType == CarType.SUV){
			//build suv
		}else if(carType == CarType.TRUCK) {
			//build truck
		}
	}
}

This is of course the simplest example but right now you probably have the idea about the pattern. In next post I will try to present more advanced examples.

3. Stratagy.

It's a really easy to learn pattern. Maybe more dificult sometimes to use but in theory it's quite easy. It uses the principle of the polimorphism.
Basically first you need to create an interface or abstract class whith abstract methods. Yor interface or abstract class is the type you will use in your code
and implementation is hidden below the interface or abstract class.
Let me give you an example. Imagine that we would like to implement some set of functionality which can be run on your desktop and mobile phone.
First you need to define an abstract class which will be very general - call it PlatformStrategy

public abstract class PlatformStrategy
{

	public abstract void printMessage();

}

Next step is define specyfic implementations: PlatformStrategyMobile and PlatformStrategyDesktop which extend PlatformStrategy. As you probably noticed
both method have printMessage method but ofcourse implementation of this method is different for each platform.
In practice when you want to use it you will do something like this:

PlatformStrategy platform = new PlatformStrategyDesktop();
platform.printMessage();
Ofcourse object creation can be change to something more conditional with some if statement or you can inject is through dependency injection or even read some
file or system property and do some actions based on that.

4. Bridge pattern
Bridge pattern is a pattern which main aim is to help you structure your code in a way it is ready to add new functionality (modules, functions) and in the same time it should mitigates the risk of breaking existing functionality. This patterns fallows open/closed principle.
Open - your code is open for the extensions (new functionality, modules, functions)
Closed - code is closed for a modification. New changes shouldn't break down existing functionality.
This can be achieved by not so complicated relation between objects. I will try to explain this relation. Let's use below picture from a Design Patterns: Elements of reusable software book.

bridge

Even if you don't know UML you can read from the picture that there are few elements which works together. Let's break it into smaller pieces and explain everything. But to do it we should use some real example. I will use Socket class from a java.net package link

Think about socket as an Abstraction rectangle from our picture. Socket class defines an API for the client which want to use it. It contains methods like open (opens the socket) and close (close the socket).
You can see that those methods are high level for the Socket itself. So what about low level methods with actual implementation? Where you can find id? Answer is pretty simple you can find them in SocketImpl link class. Socket class has a field called socketImpl which type is SocketImpl. SocketImpl is in our case a Implementator from the picture and
socketImpl is a concrete instance of it. SocketImpl itself is an abstract class and can't be initialized but there are multiple classes which extends SocketImpl class and they are ConcreteImplementator from our picture. For the socket example concrete implementators are:

PlainSocket - delegations to the native socket methods
SdpSocket - supports sdp protocol.
SocksSocketImpl - SOCKS (V4 & V5) TCP socket implementation (RFC 1928).
Type of the field socketImpl by default  is a SocketImpl  and Iplementation is SocksSocketImpl, but of course it can be different it depends on your needs.

Last puzzle from our picture is RefinedAbstractions. You probably see that there is a relations between Abstraction (Socket) and RefinedAbstraction. This relation is a subclass. RefinedAbstraction extends Abstraction. In Socket case RefinedAbstractions are e.g. :

HttpSendSocket
SSLSocketImpl
For me this concept on a beginning was hard to understand. But when you think about it it makes sense. Let's look into SSLSocketImpl class.
From a javadoc:

This is a normal connection type socket, implementing SSL over some lower level socket, such as TCP. Because it is layered over some lower level socket, it MUST override all default socket methods.
RefinedAbstraction is sometimes needed to introduce new kind of a functionality. For a client methods should be the same (e.g. connect, close) but basic functionality is extended in this case.

Useful links:

https://dzone.com/articles/design-patterns-bridge
youtube video
wiki page with bridge pattern definition:  https://en.wikipedia.org/wiki/Bridge_pattern




Opisac na podstawie Socket w Javie

Presentation:https://sway.com/7qu8H4yTdj3u8Ow8
